@using Microsoft.AspNetCore.Components.Virtualization

<p>
    Item size:<br />
    <input type="number" @bind-value="itemSize" />
</p>

<p>
    Scrollable div:<br />
    <div style="background-color: #eee; height: 500px; overflow-y: auto">
        <Virtualize Items="@Items" ItemSize="itemSize">
            <div @key="@context" style="height: @(itemSize)px; background-color: rgb(@((context % 2) * 255), @((1-(context % 2)) * 255), 255);">Item @context</div>
        </Virtualize>
        <Virtualize Items="@Items" ItemSize="itemSize">
            <div @key="@context" style="height: @(itemSize)px; background-color: rgb(0, @((context % 2) * 255), @((1-(context % 2)) * 255));">Item @context</div>
        </Virtualize>
    </div>
</p>

<p>
    Async items:<br />
    <div style="background-color: #eee; height: 500px; overflow-y: auto">
        <InfiniteScroll ItemsProvider="GetItems" ItemBatchSize="20" ItemSize="itemSize">
            <Item>
                <div @key="@context" style="height: @(itemSize)px; background-color: rgb(@((context % 2) * 255), @((1-(context % 2)) * 255), 255);">Item @context</div>
            </Item>
            <InfiniteScrollFooter>
                <div @key="@("infinite-scroll-footer")" style="height: @(itemSize)px; background-color: white;">
                    Loading...
                </div>
            </InfiniteScrollFooter>
        </InfiniteScroll>
    </div>
</p>

<p>
    Viewport as root:<br />
    <Virtualize Items="@Items" ItemSize="itemSize">
        <div @key="@context" style="height: @(itemSize)px; background-color: rgb(@((context % 2) * 255), @((1-(context % 2)) * 255), 255);">Item @context</div>
    </Virtualize>
    <Virtualize Items="@Items" ItemSize="itemSize">
        <div @key="@context" style="height: @(itemSize)px; background-color: rgb(0, @((context % 2) * 255), @((1-(context % 2)) * 255));">Item @context</div>
    </Virtualize>
</p>

@code {
    float itemSize = 100;
    Random rng = new Random();
    ICollection<int> Items = Enumerable.Range(0, 1000).ToList();

    Task<IEnumerable<int>> GetItems(Range range)
    {
        return Task.Delay(500).ContinueWith<IEnumerable<int>>(_ =>
            Enumerable.Range(range.Start.Value, range.End.Value - range.Start.Value));
    }
}
